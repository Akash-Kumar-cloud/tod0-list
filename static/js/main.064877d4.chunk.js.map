{"version":3,"sources":["TodoItem.js","Todos.js","AddToDo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textAlign","width","background","padding","margin","borderBottom","border","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","getDelete","Component","color","borderRadius","cursor","float","Todos","todos","map","key","AddToDo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","TextField","label","required","Fab","size","App","uuid","v4","filter","console","log","newTodo","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.064877d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoItem extends Component{\r\n    getStyle = () =>{\r\n        return {\r\n            textAlign : 'left',\r\n            width :'30%',\r\n            background : '#f4f4f4',\r\n            padding : '10px',\r\n            margin : '8px',\r\n            borderBottom : '1px #ccc',\r\n            border : '20px #33C4D9',\r\n            textDecoration : this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n       \r\n    }\r\n    render(){\r\n        const {id,title} = this.props.todo;\r\n        return (\r\n           <center><div style={this.getStyle()}>\r\n                \r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{' '}\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.getDelete.bind(this,id)}>X</button>\r\n                </p>\r\n            </div>\r\n            </center>\r\n        )\r\n    }\r\n}\r\nconst btnStyle = {\r\n    background : '#ff0000',\r\n    color : '#fff',\r\n    border : 'none',\r\n    padding : '5px 10px',\r\n    borderRadius : '50%',\r\n    cursor : 'pointer',\r\n    float : 'right'\r\n}\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass Todos extends Component{\r\n    render(){\r\n        return this.props.todos.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} getDelete={this.props.getDelete}/>\r\n        ));\r\n       \r\n    }\r\n}\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nclass AddToDo extends Component{\r\n    state={\r\n        title : ''\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title : ''});\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]:e.target.value});\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.onSubmit}>\r\n                <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            To Do List\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n                <TextField id=\"standard-basic\" type=\"text\" name=\"title\" label=\"List Name\" value={this.state.title} onChange={this.onChange} required />\r\n                <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" type=\"submit\">\r\n                 <AddIcon />\r\n                </Fab>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default AddToDo;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport './App.css';\nimport AddToDo from './AddToDo';\nimport uuid from 'uuid';\n\nclass App extends Component {\n  state = {\n    todos : [\n      {\n        id : uuid.v4(),\n        title : 'Three Mistake of my life',\n        completed : false\n      },\n      {\n        id : uuid.v4(),\n        title : 'Code Sleep Eat Repeat',\n        completed : true\n      },\n      {\n        id : uuid.v4(),\n        title : 'Untold Story of NIT Calicut',\n        completed : false\n      }\n    ]\n  }\n\n  markComplete = (id) =>{\n    this.setState({\n      todos : this.state.todos.map(todo =>{\n        if(todo.id===id){\n          todo.completed=!todo.completed\n        }\n        return todo;\n      })\n    });\n  }\n\n  getDelete = (id) =>{\n    this.setState({\n      todos : [...this.state.todos.filter(todo => todo.id!==id)]\n    });\n  }\n\n  addTodo = (title) =>{\n    console.log(title);\n    const newTodo = {\n      id : uuid.v4(),\n      title,\n      completed : false\n    }\n    this.setState({ todos : [...this.state.todos, newTodo]});\n  }\n  render(){\n    return (\n      <div className=\"App\">\n         <AddToDo addTodo={this.addTodo}/>\n        <Todos todos = {this.state.todos} markComplete={this.markComplete} getDelete={this.getDelete}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}